// <auto-generated />
using System;
using DaemonsMCP.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DaemonsMCP.Infrastructure.Migrations
{
    [DbContext(typeof(DaemonsMcpDbContext))]
    [Migration("20251018234250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.FileSystemNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IndexedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDirectory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "ParentId");

                    b.HasIndex("ProjectId", "RelativePath")
                        .IsUnique();

                    b.ToTable("FileSystemNodes");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.Identifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.IdentifierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IdentifierTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "namespace"
                        },
                        new
                        {
                            Id = 2,
                            Name = "interface"
                        },
                        new
                        {
                            Id = 3,
                            Name = "class"
                        },
                        new
                        {
                            Id = 4,
                            Name = "method"
                        },
                        new
                        {
                            Id = 5,
                            Name = "property"
                        },
                        new
                        {
                            Id = 6,
                            Name = "field"
                        },
                        new
                        {
                            Id = 7,
                            Name = "event"
                        },
                        new
                        {
                            Id = 8,
                            Name = "methodParameter"
                        });
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.IndexQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FileSystemNodeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileSystemNodeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Status", "CreatedAt");

                    b.ToTable("IndexQueues");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.ObjectHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FileSystemNodeId")
                        .HasColumnType("int");

                    b.Property<int>("IdentifierId")
                        .HasColumnType("int");

                    b.Property<int>("IdentifierTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IndexedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineEnd")
                        .HasColumnType("int");

                    b.Property<int>("LineStart")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileSystemNodeId");

                    b.HasIndex("IdentifierId");

                    b.HasIndex("IdentifierTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "ParentId");

                    b.ToTable("ObjectHierarchies");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RootPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comma-separated list of folder names to exclude from sync",
                            Key = "FileSystem.BlockedFolders",
                            ModifiedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "bin,obj,node_modules,.git,.vs,.vscode,packages,Debug,Release,TestResults,.idea"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comma-separated list of file extensions to exclude from sync",
                            Key = "FileSystem.BlockedExtensions",
                            ModifiedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = ".dll,.exe,.pdb,.cache,.suo,.user,.tmp,.temp,.log,.bak"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "If set, only these extensions are synced (leave empty to allow all non-blocked)",
                            Key = "FileSystem.AllowedExtensions",
                            ModifiedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = ".cs,.csproj,.sln,.json,.xml,.md,.txt,.config,.yml,.yaml"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comma-separated list of specific filenames to exclude",
                            Key = "FileSystem.BlockedFiles",
                            ModifiedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = ".DS_Store,Thumbs.db,desktop.ini"
                        });
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.FileSystemNode", b =>
                {
                    b.HasOne("DaemonsMCP.Domain.Entities.FileSystemNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DaemonsMCP.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.IndexQueue", b =>
                {
                    b.HasOne("DaemonsMCP.Domain.Entities.FileSystemNode", "FileSystemNode")
                        .WithMany()
                        .HasForeignKey("FileSystemNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaemonsMCP.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FileSystemNode");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.ObjectHierarchy", b =>
                {
                    b.HasOne("DaemonsMCP.Domain.Entities.FileSystemNode", "FileSystemNode")
                        .WithMany()
                        .HasForeignKey("FileSystemNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaemonsMCP.Domain.Entities.Identifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DaemonsMCP.Domain.Entities.IdentifierType", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DaemonsMCP.Domain.Entities.ObjectHierarchy", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DaemonsMCP.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FileSystemNode");

                    b.Navigation("Identifier");

                    b.Navigation("IdentifierType");

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.FileSystemNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("DaemonsMCP.Domain.Entities.ObjectHierarchy", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
