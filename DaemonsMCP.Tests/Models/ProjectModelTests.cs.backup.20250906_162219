using DaemonsMCP.Core.Models;
using FluentAssertions;

namespace DaemonsMCP.Tests.Models
{
    [TestClass]
    public class ProjectModelTests
    {
        [TestMethod]
        public void Constructor_WithValidParameters_ShouldInitializeCorrectly()
        {
            // Arrange
            const string expectedName = "TestProject";
            const string expectedDescription = "Test Description";
            const string expectedPath = @"C:\TestPath";

            // Act
            var project = new ProjectModel(expectedName, expectedDescription, expectedPath);

            // Assert
            project.Name.Should().Be(expectedName);
            project.Description.Should().Be(expectedDescription);
            project.Path.Should().Be(expectedPath);
        }

        [TestMethod]
        public void Constructor_WithNullName_ShouldThrowArgumentException()
        {
            // Arrange
            const string nullName = null;
            const string validDescription = "Test Description";
            const string validPath = @"C:\TestPath";

            // Act & Assert
            Action act = () => new ProjectModel(nullName, validDescription, validPath);
            
            act.Should().Throw<ArgumentException>()
                .WithParameterName("name")
                .WithMessage("*cannot be null or empty*");
        }

        [TestMethod]
        public void Constructor_WithEmptyName_ShouldThrowArgumentException()
        {
            // Arrange
            const string emptyName = "";
            const string validDescription = "Test Description";
            const string validPath = @"C:\TestPath";

            // Act & Assert
            Action act = () => new ProjectModel(emptyName, validDescription, validPath);
            
            act.Should().Throw<ArgumentException>()
                .WithParameterName("name")
                .WithMessage("*cannot be null or empty*");
        }

        [TestMethod]
        public void Constructor_WithNullDescription_ShouldUseEmptyString()
        {
            // Arrange
            const string validName = "TestProject";
            const string nullDescription = null;
            const string validPath = @"C:\TestPath";

            // Act
            var project = new ProjectModel(validName, nullDescription, validPath);

            // Assert
            project.Name.Should().Be(validName);
            project.Description.Should().Be(string.Empty);
            project.Path.Should().Be(validPath);
        }
    
    }
}